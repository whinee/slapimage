{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"whinesnips  <p>whine's nips mmm</p> <p>Website: whsn.whinyaan.xyz</p> <p>Github: github.com/whinee/whinesnips</p> <p>PyPi: pypi.org/project/whinesnips</p> <p>To be updated, be sure to watch this repository and join the Discord Support Server (!2) for this and other projects.</p> <p>Interested in commissioning projects? Inquire through Discord(whinyaan) or through e-mail(whinyaan@protonmail.com). Price starts at 30 USD.</p>"},{"location":"#toc","title":"Table of Contents","text":"<ul><li>Important</li><li>What\u2019s this?<ul><li>Supported OSes</li></ul></li><li>Usage</li><li>Getting Started</li><li>Known Issues and Limitations</li><li>Contributions</li><li>License<ul><li>MIT</li></ul></li><li>Attribution<ul><li>MIT Logo</li><li>Icons</li></ul></li><li>Further Reading</li></ul>"},{"location":"#important","title":"Important","text":"<p>whinesnips is still in Development Stage.</p> <p>Using the library at this stage is not recommended.</p>"},{"location":"#what-s-this","title":"What\u2019s this?","text":"<p>whinesnips is a python library \u2015 that is named to sound like \"whine's nips\" (nipples) \u2015 that I made in order to separate and unify all of my python utility functions in a singular repository.</p>"},{"location":"#what-s-this-supported-oses","title":"Supported OSes","text":"<p>Supposedly every operating system that supports running python, more preferably natively.</p>"},{"location":"#usage","title":"Usage","text":"<p>     This section is not yet complete. </p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Visit this link to get started. The instructions will get you a copy of the project up and running on your local machine for development and testing purposes.</p>"},{"location":"#known-issues-and-limitations","title":"Known Issues and Limitations","text":"<p>There is no know issues and limitations for this library at the moment.</p>"},{"location":"#contributions","title":"Contributions","text":"<p>For contributing in whinesnips, visit this link</p>"},{"location":"#license","title":"License","text":""},{"location":"#mit","title":"MIT","text":"<p>Copyright for portions of project whinesnips are held by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL, and by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL.</p> <p>All other copyright for project whinesnips are held by [Github Account whinee Owner, 2023].</p> <p>Check the license for more details.</p>"},{"location":"#attribution","title":"Attribution","text":""},{"location":"#attribution-mit-logo","title":"MIT Logo","text":"<p>Massachusetts Institute of Technology (vectorized by Mysid, modified by whi~nyaan!), Public domain, via Wikimedia Commons</p>"},{"location":"#attribution-icons","title":"Icons","text":"<p>Exclamation Mark, Code Fork, Star, Group, Code, and Discord icons by Icons8</p> <p><sub> NOTE: If a reference or source material is not attributed properly or not at all, please kindly message me at Discord: whinyaan or create a pull request so I can properly give credit to their respective authors.      </sub></p>"},{"location":"#further-reading","title":"Further Reading","text":"<ul> <li>Frequently Asked Questions</li> <li>License Agreement</li> <li>Latest Documentation (0.0.x.x)</li> <li>All Documentation</li> <li>Changelog</li> <li>Latest Bump</li> <li>Latest Commit</li> <li>Notes for whi~nyaan!</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"Changelog"},{"location":"changelog/#0-0-0-0-0-0","title":"0.0.0.0-alpha.0","text":""},{"location":"code-of-conduct/","title":"Code of Conduct","text":""},{"location":"code-of-conduct/#toc","title":"Table of Contents","text":"<ul><li>Our Pledge</li><li>Our Standards</li><li>Our Responsibilities</li><li>Scope</li><li>Enforcement</li><li>Attribution</li></ul>"},{"location":"code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, caste, citizenship, civil status, disability, education, ethnicity, familial status, gender or sexual identity and expression, genetic information, immigration status, level of experience, nationality, personal appearance, pregnancy, race, religion, sex characteristics, sexual orientation, socio-economic status, tribe, veteran status, and the likes.</p>"},{"location":"code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code-of-conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at {{mail_acc}}. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4 and 2.0, and was generated by bttger/contributing-gen.</p>"},{"location":"contributing/","title":"Contributing to the project","text":"<p>First off, thanks for taking the time to contribute! \u2764\ufe0f</p> <p>All types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89</p> <p>And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about:</p> <ul> <li>Star the project</li> <li>Tweet about it</li> <li>Refer this project in your project's README</li> <li>Mention the project at local meetups and tell your friends/colleagues</li> </ul>"},{"location":"contributing/#toc","title":"Table of Contents","text":"<ul><li>Code of Conduct</li><li>I Have a Question</li><li>I Want To Contribute<ul><li>Legal Notice</li><li>Reporting Bugs<ul><li>Before Submitting a Bug Report</li><li>How Do I Submit a Good Bug Report?</li></ul></li><li>Suggesting Enhancements<ul><li>Before Submitting an Enhancement</li><li>How Do I Submit a Good Enhancement Suggestion?</li></ul></li><li>Your First Code Contribution</li><li>Improving The Documentation</li></ul></li><li>Submitting a Pull Request<ul><li>Dont\u2019s</li></ul></li><li>Style guides<ul><li>Commit Messages</li><li>Code</li></ul></li><li>Join The Project Team</li><li>Attribution</li></ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by the {{project_name}} Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;&gt;.</p>"},{"location":"contributing/#i-have-a-question","title":"I Have a Question","text":"<p>If you want to ask a question, we assume that you have read the available Latest Documentation (0.0.x.x).</p> <p>Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first.</p> <p>If you then still feel the need to ask a question and need clarification, we recommend the following:</p> <ul> <li>Open an Issue.</li> <li>Provide as much context as you can about what you're running into.</li> <li>Provide the following information:<ul> <li>OS name and version     If in Linux, include linux distribution and kernel version; and</li> <li>Python version</li> </ul> </li> </ul> <p>We will then take care of the issue as soon as possible.</p>"},{"location":"contributing/#i-want-to-contribute","title":"I Want To Contribute","text":""},{"location":"contributing/#i-want-to-contribute-legal-notice","title":"Legal Notice","text":"<p>When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.</p>"},{"location":"contributing/#i-want-to-contribute-reporting-bugs","title":"Reporting Bugs","text":""},{"location":"contributing/#i-want-to-contribute-reporting-bugs-before-submitting-a-bug-report","title":"Before Submitting a Bug Report","text":"<p>A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.</p> <ul> <li>Make sure that you are using the latest version.</li> <li>Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the Latest Documentation (0.0.x.x). If you are looking for support, you might want to check this section).</li> <li>To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the bug tracker.</li> <li> <p>Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.</p> </li> <li> <p>Collect information about the bug</p> </li> <li>Stack trace (Traceback)</li> <li>OS, Platform and Version (Windows, Linux, macOS, x86, ARM)</li> <li>Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant.</li> <li>Possibly your input and the output</li> <li>Can you reliably reproduce the issue? And can you also reproduce it with older versions?</li> </ul>"},{"location":"contributing/#i-want-to-contribute-reporting-bugs-how-do-i-submit-a-good-bug-report","title":"How Do I Submit a Good Bug Report?","text":"<p>You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to &lt;&gt;.</p> <p>We use GitHub issues to track bugs and errors. If you run into an issue with the project:</p> <ul> <li>Open an Issue. (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.)</li> <li>Explain the behavior you would expect and the actual behavior.</li> <li>Please provide as much context as possible and describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case.</li> <li>Provide the information you collected in the previous section.</li> </ul> <p>Once it's filed:</p> <ul> <li>The project team will label the issue accordingly.</li> <li>A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as <code>needs-repro</code>. Bugs with the <code>needs-repro</code> tag will not be addressed until they are reproduced.</li> <li>If the team is able to reproduce the issue, it will be marked <code>needs-fix</code>, as well as possibly other tags (such as <code>critical</code>), and the issue will be left to be implemented by someone.</li> </ul>"},{"location":"contributing/#i-want-to-contribute-suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>This section guides you through submitting an enhancement suggestion for {{project_name}}, including completely new features and minor improvements to existing functionality. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.</p>"},{"location":"contributing/#i-want-to-contribute-suggesting-enhancements-before-submitting-an-enhancement","title":"Before Submitting an Enhancement","text":"<ul> <li>Make sure that you are using the latest version.</li> <li>Read the Latest Documentation (0.0.x.x) carefully and find out if the functionality is already covered, maybe by an individual configuration.</li> <li>Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.</li> <li>Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.</li> </ul>"},{"location":"contributing/#i-want-to-contribute-suggesting-enhancements-how-do-i-submit-a-good-enhancement-suggestion","title":"How Do I Submit a Good Enhancement Suggestion?","text":"<p>Enhancement suggestions are tracked as GitHub issues.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the suggestion.</li> <li>Provide a step-by-step description of the suggested enhancement in as many details as possible.</li> <li>Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you.</li> <li>You may want to include screenshots and animated GIFs which help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. </li> <li>Explain why this enhancement would be useful to most {{project_name}} users. You may also want to point out the other projects that solved it better and which could serve as inspiration.</li> </ul>"},{"location":"contributing/#i-want-to-contribute-your-first-code-contribution","title":"Your First Code Contribution","text":""},{"location":"contributing/#i-want-to-contribute-improving-the-documentation","title":"Improving The Documentation","text":""},{"location":"contributing/#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<p>This is based on Michael Herrmann's gist titled Good PRs are minimal.</p> <p>Every Pull Request (hereinafter referred to as PR) should have one, and only one, unique goal. The PR should make the absolute minimum number of changes that are required to achieve this goal.</p> <p>The fewer things you change, the easier it will be for the team to see what you did, and thus gain confidence that you PR makes sense.</p>"},{"location":"contributing/#submitting-a-pull-request-dont-s","title":"Dont\u2019s","text":"<ul> <li> <p>Changing whitespace unnecessarily, eg. switching tabs and spaces.</p> <p>This leads to huge numbers of unnecessarily changed lines of code.</p> </li> <li> <p>Running a linter not listed in the linters currently used by the project</p> </li> <li>Don't unnecessarily introduce new tools or dependencies. I'm sure you have your    favorites. But don't force them on me or other contributors. Stick to those    that are absolutely required, or come with the language.</li> <li>Obey the same code style as the library: Tabs or spaces, maximum line length,    etc.</li> </ul> <p>In short: Good PRs are minimal. You're very welcome to add several improvements. But please make them in separate PRs.</p>"},{"location":"contributing/#style-guides","title":"Style guides","text":""},{"location":"contributing/#style-guides-commit-messages","title":"Commit Messages","text":"<p>This repository does not enforce a style guide on commits. However, it is highly recommended to be concise and informative when writing commit messages.</p>"},{"location":"contributing/#style-guides-code","title":"Code","text":"<p>This project uses the following linters for the</p>"},{"location":"contributing/#join-the-project-team","title":"Join The Project Team","text":""},{"location":"contributing/#attribution","title":"Attribution","text":"<p>This guide is based on the contributing-gen. Make your own!</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#toc","title":"Table of Contents","text":"<ul><li>Is this application safe?</li><li>What are your intentions in making this application?</li><li>Who are you?</li></ul>"},{"location":"faq/#is-this-application-safe","title":"Is this application safe?","text":"TL;DR: First of all, safe from what aspect, bruv? Considering that you are asking this, probably not. Is this application safe for my computer? TL;DR: Yes, but not really. Safe enough to put a 99.99% safety guarantee on it, air commercials of it, and not get sued on the grounds of false advertisement. <p>No software is ever safe, and there will never be. Unless if we, for some mysterious and divine reason, gain the ability to prove if a program halts or not, which in this universe is impossible (relevant link: Halting problem).</p> <p>Enough of explaining the philosophical implications of this problematic question, and let us go to the real meat of the discussion. No, I can not assure you, as the developer of this application, that this application is safe. It is like asking if I poisoned your food; regardless of if I did it or not, I will dutifully deny the allegation, duh. Make of that what you will, but I am here to chase clout and make money out of it, not to compromise machines.</p> <p>Well, with all that said, I also made it for personal use. And for that, I have to make it at the very least usable to the extent that it would not compromise the host machine that it is running on.</p> <p>Don't trust me? The application is open-sourced. Every packaged application downloaded from the official site and Github repository is built from the same source as available on the official Github repository. If you know how to read the source code, you are free to do so, and inspect it. If you did do so, please hunt down some bugs for me. They haunt me at night, whenever I'm with my friends at the mall, just wherever I am. Please, I'm scared, I will very much appreciate it if you do.</p> <p>To end this answer, well... I mean, you could run the thing on a virus checker. Although, what might be an innocuous yet insecure system API call might be flagged as a suspicious activity. Not that I am aware of anything of that sort in my application, but I think that that will suffice as an example.</p>"},{"location":"faq/#what-are-your-intentions-in-making-this-application","title":"What are your intentions in making this application?","text":"TL;DR: It's a hobby of mine. It is not driven by money or ill intentions. You asked me, trust me. <p>This started out as a hobby project. To pass time, and live out the rest of my days as a virgin NEET and a total social recluse. Assuming that you can see this site right now, it has grew into this large and popular project that it has become.</p> <p>My intentions however are still the same as it was months ago. However, I have a side goal in mind right now: to attain popularity in the animanga piracy scene, enough to get me enough freelancing work and earn money.</p> <p>Yes, that is it, really. I am in it for the money, but the development of this application is but money-driven. I mean, I would very much appreciate it if you could donate money or a little bit of your time to ths endeavour of mine, or commission me to do some work for you.</p>"},{"location":"faq/#who-are-you","title":"Who are you?","text":"TL;DR: That's a creepy thing to ask dude, I'm kind of a teenager??? \\s <p>Hello, I am whi_ne, short for whitespace_negative. 18 at the time of writing. I am a python and a web developer, albeit shitty at both of them. I also do some freelance work. Nice to meet ya!</p> <p>Yes, I use an alias. Personal branding is dead. I want to stay anonymous. However, my pics on multiple guy's DMs suggest otherwise. And yes, please do not dig up dirt on me, I will let you know everything you want.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#toc","title":"Table of Contents","text":"<ul><li>Installing Prerequisites<ul><li>Windows</li><li>Mac</li><li>Linux<ul><li>Debian</li><li>Arch</li></ul></li></ul></li></ul>"},{"location":"getting-started/#installing-prerequisites","title":"Installing Prerequisites","text":""},{"location":"getting-started/#installing-prerequisites-windows","title":"Windows","text":"<ol> <li> <p>Copy the following text:</p> <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072\niex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n</code></pre> </li> <li> <p>Press <code>Win</code>. An interface should pop up as shown below:</p> <p></p> </li> <li> <p>Search for settings by typing \"<code>Settings</code>\" in the text field as shown below:</p> <p></p> <p>Press <code>Enter</code>.</p> </li> <li> <p>A window should pop up as shown below:</p> <p></p> <p>Press \"<code>Apps</code>\" in the selection below.</p> </li> <li> <p>You should be redirected to \"<code>Apps &amp; Features</code>\" as shown below:</p> <p></p> <p>Below the subtitle \"<code>Apps &amp; Features</code>\", press the hyperlink \"<code>App execution aliases</code>\".</p> </li> <li> <p>You should be redirected to \"<code>App execution aliases</code>\" as shown below:</p> <p></p> <p>Turn off the \"<code>App installer</code>\" for both \"<code>python.exe</code>\" and \"<code>python3.exe</code>\". Afterwards, exit the settings app.</p> </li> <li> <p>Press <code>Windows</code> + <code>R</code> (Press <code>Windows</code> and <code>R</code> keys simultaneously)</p> </li> <li> <p>A window with a title <code>Run</code> should appear. Focus to the said window in the <code>Open:</code> text field by hovering the mouse towards the said text field and left-clicking the mouse and type <code>powershell</code> as shown below:</p> <p></p> </li> <li> <p>Press <code>Ctrl</code> + <code>Shift</code> + <code>Enter</code> (Press <code>Ctrl</code>, <code>Shift</code>, and <code>Enter</code> keys simultaneously).</p> </li> <li> <p>A window with a title <code>User Account Control</code> should appear as shown below:</p> <p></p> </li> <li> <p>Focus to the said window and press the <code>Yes</code> button by hovering the mouse towards the said button and left-clicking the mouse. A window named <code>Administrator: Windows Powershell</code> should pop-up.</p> </li> <li> <p>Focus to the window named <code>Administrator: Windows Powershell</code> window by hovering the mouse towards the said window and left-clicking the mouse. Then, press <code>Ctrl</code> + <code>V</code> (Press <code>Ctrl</code> and <code>V</code> keys simultaneously), and <code>Enter</code> afterwards.</p> <p>If the window <code>Administrator: Windows Powershell</code> seems to hang up, focus to said window by hovering the mouse towards the said window and left-clicking the mouse, then press <code>Enter</code> five times every minute or so until something happens.</p> </li> <li> <p>Restart your computer, then login to the user account to which you have done the above instructions at.</p> </li> <li> <p>Copy the following text:</p> <pre><code>choco install -y just nodejs python\nnpm install katex\n</code></pre> <p>Then, repeat step 7-12.</p> </li> <li> <p>[RECOMMENDED] Change directory to desired one</p> <p>It is recommended to change directory to where you want to fiddle around with the project at, by copying the following text, and replacing the <code>&lt;dir&gt;</code> in said text to your desired directory in your machine:</p> <pre><code>cd &lt;dir&gt;\n</code></pre> <p>Afterwards, repeat step 12.</p> </li> <li> <p>Copy the following text:</p> <pre><code>git clone https://github.com/{{organization}}/{{repo_name}}\n</code></pre> <p>Afterwards, repeat step 12.</p> </li> <li> <p>Copy the following text:</p> <pre><code>just bootstrap\n</code></pre> <p>Afterwards, repeat step 12.</p> </li> <li> <p>Every time you open the terminal, copy the following text</p> <pre><code>just dev\n</code></pre> <p>Afterwards, repeat step 12. It should give you instructions on what to do.</p> </li> </ol> <p>Congratulations, you are now ready to develop {{project_name}}! For contribution guidelines, visit this link.</p>"},{"location":"getting-started/#installing-prerequisites-mac","title":"Mac","text":"<ol> <li> <p>Open your preferred terminal and run the following command:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n</code></pre> </li> <li> <p>Next, for OS X 10.13 (High Sierra) or younger, run the following command:</p> <pre><code>echo 'export PATH=\"/usr/local/opt/python/libexec/bin:$PATH\"' &gt;&gt; ~/.profile\n</code></pre> <p>And for OS X 10.12 (Sierra) or older, use the following command instead:</p> <pre><code>echo 'export PATH=/usr/local/bin:/usr/local/sbin:$PATH' &gt;&gt; ~/.profile\n</code></pre> </li> <li> <p>Afterwards, install the rest of the prerequisites by running the following command:</p> <pre><code>brew install just node python\n</code></pre> </li> <li> <p>Then, install katex with npm by running the following command:</p> <pre><code>npm install katex\n</code></pre> </li> <li> <p>[RECOMMENDED] Change directory to desired one</p> <p>It is recommended to change directory to where you want to fiddle around with the project at, by replacing the <code>&lt;dir&gt;</code> in the following text to your desired directory in your machine, and running it as a command:</p> <pre><code>cd &lt;dir&gt;\n</code></pre> </li> <li> <p>Clone the repository by running the following command:</p> <pre><code>git clone https://github.com/{{organization}}/{{repo_name}}\n</code></pre> </li> <li> <p>Finally, bootstrap your development environment by running the following command:</p> <pre><code>just bootstrap\n</code></pre> </li> <li> <p>Every time you open the terminal, run the following command:</p> <pre><code>just dev\n</code></pre> <p>It should give you instructions on what to do.</p> </li> </ol> <p>Congratulations, you are now ready to develop {{project_name}}! For contribution guidelines, visit this link.</p>"},{"location":"getting-started/#installing-prerequisites-linux","title":"Linux","text":""},{"location":"getting-started/#installing-prerequisites-linux-debian","title":"Debian","text":"<ol> <li> <p>Open your preferred terminal and run the following command to install the prerequisites:</p> <pre><code>curl -q 'https://proget.makedeb.org/debian-feeds/prebuilt-mpr.pub' | gpg --dearmor | sudo tee /usr/share/keyrings/prebuilt-mpr-archive-keyring.gpg 1&gt; /dev/null\necho \"deb [arch=amd64 signed-by=/usr/share/keyrings/prebuilt-mpr-archive-keyring.gpg] https://proget.makedeb.org prebuilt-mpr $(lsb_release -cs)\" | sudo tee /etc/apt/sources.list.d/prebuilt-mpr.list\nsudo apt update -y\nsudo apt install -y just nodejs python3-pip\n</code></pre> </li> <li> <p>Then, install katex with npm by running the following command:</p> <pre><code>npm install katex\n</code></pre> </li> <li> <p>[RECOMMENDED] Change directory to desired one</p> <p>It is recommended to change directory to where you want to fiddle around with the project at, by replacing the <code>&lt;dir&gt;</code> in the following text to your desired directory in your machine, and running it as a command:</p> <pre><code>cd &lt;dir&gt;\n</code></pre> </li> <li> <p>Clone the repository by running the following command:</p> <pre><code>git clone https://github.com/{{organization}}/{{repo_name}}\n</code></pre> </li> <li> <p>Finally, bootstrap your development environment by running the following command:</p> <pre><code>just bootstrap\n</code></pre> </li> <li> <p>Every time you open the terminal, run the following command:</p> <pre><code>just dev\n</code></pre> <p>It should give you instructions on what to do.</p> </li> </ol> <p>Congratulations, you are now ready to develop {{project_name}}! For contribution guidelines, visit this link.</p>"},{"location":"getting-started/#installing-prerequisites-linux-arch","title":"Arch","text":"<ol> <li> <p>Open your preferred terminal and run the following command to install the prerequisites:</p> <pre><code>sudo pacman -Syyu --noconfirm just nodejs python\n</code></pre> </li> <li> <p>Then, install katex with npm by running the following command:</p> <pre><code>npm install katex\n</code></pre> </li> <li> <p>[RECOMMENDED] Change directory to desired one</p> <p>It is recommended to change directory to where you want to fiddle around with the project at, by replacing the <code>&lt;dir&gt;</code> in the following text to your desired directory in your machine, and running it as a command:</p> <pre><code>cd &lt;dir&gt;\n</code></pre> </li> <li> <p>Clone the repository by running the following command:</p> <pre><code>git clone https://github.com/{{organization}}/{{repo_name}}\n</code></pre> </li> <li> <p>Finally, bootstrap your development environment by running the following command:</p> <pre><code>just bootstrap\n</code></pre> </li> <li> <p>Every time you open the terminal, run the following command:</p> <pre><code>just dev\n</code></pre> <p>It should give you instructions on what to do.</p> </li> </ol> <p>Congratulations, you are now ready to develop {{project_name}}! For contribution guidelines, visit this link.</p>"},{"location":"latest-bump/","title":"Latest Version\nBump","text":"Latest Version Bump"},{"location":"latest-bump/#0000-alpha0","title":"0.0.0.0-alpha.0","text":"<p>Initial release of the application</p>"},{"location":"latest-commit/","title":"Latest Commit","text":"Latest Commit"},{"location":"latest-commit/#summary","title":"Summary","text":"<p>If nothing is mentioned below, assume nothing noteworthy got commited.</p>"},{"location":"latest-commit/#changes","title":"Changes","text":""},{"location":"latest-release-notes/","title":"Latest Release\nNotes:\n0.0.0.0-alpha.0","text":"Latest Release Notes: 0.0.0.0-alpha.0"},{"location":"latest-release-notes/#description","title":"Description","text":"<p>Initial release of the application</p>"},{"location":"license/","title":"License","text":"<p>Copyright for portions of project whinesnips are held by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL, and by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL.</p> <p>All other copyright for project whinesnips are held by [Github Account whinee Owner, 2023].</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"notes-to-self/","title":"Notes to Self","text":"<p>Look, whi_ne, I have written this for you.</p> <p>Please, do I humbly plead you, do not ever forgot to read this before pushing changes to Github. Or like, just look at this once in a while. This is your holy bible.</p>"},{"location":"notes-to-self/#toc","title":"Table of Contents","text":"<ul><li>File Naming Conventions<ul><li>Markdown</li><li>Python</li></ul></li><li>File Contents Naming Conventions<ul><li>Python<ul><li>DOs</li><li>DON\u2019Ts</li></ul></li></ul></li><li>Versioning System<ul><li>Version Bump Guides</li></ul></li><li>Changelog</li><li>Documentation</li></ul>"},{"location":"notes-to-self/#file-naming-conventions","title":"File Naming Conventions","text":""},{"location":"notes-to-self/#file-naming-conventions-markdown","title":"Markdown","text":"<p>DOs</p> <ul> <li>Use dash to denote a space.</li> </ul>"},{"location":"notes-to-self/#file-naming-conventions-python","title":"Python","text":"<p>DOs</p> <ul> <li>Use lowercase letters for module names</li> </ul>"},{"location":"notes-to-self/#file-contents-naming-conventions","title":"File Contents Naming Conventions","text":""},{"location":"notes-to-self/#file-contents-naming-conventions-python","title":"Python","text":"<p>Hereunder is the summary of PEP 8 naming conventions.</p>"},{"location":"notes-to-self/#file-contents-naming-conventions-python-dos","title":"DOs","text":"<ul> <li>Use lowercase letters for variable and function names, and separate words with underscores (_).</li> <li>Use uppercase letters for constant variables, and separate words with underscores (_).</li> <li>Use <code>CamelCase</code> notation for naming classes.</li> <li>Prefix private variables and functions with a single underscore (_), and use double underscores (__) for name mangling.</li> <li>If you use an abbreviation that is not obvious at any given context, comment what the abbreviation is supposed to mean.</li> </ul>"},{"location":"notes-to-self/#file-contents-naming-conventions-python-don-ts","title":"DON\u2019Ts","text":"<ul> <li>Avoid using single-character variable names except for counters and iterators.</li> <li>Avoid using names that have special meaning in Python, such as \"list\" or \"str\".</li> </ul>"},{"location":"notes-to-self/#versioning-system","title":"Versioning System","text":"<p>Look, you have made your own versioning system based off semver 2.0.0. Use it properly.</p> <p>Given a version number <code>user</code>.<code>dev</code>.<code>minor</code>.<code>patch</code>, increment the:</p> <ul> <li> <p><code>user</code> version when you make any changes to the user interface/experience.</p> <p>Hereunder are exceptions for user experience changes that invokes a <code>user</code> version bump:</p> <ul> <li>Performance gains (that might improve user experience)</li> </ul> </li> <li> <p><code>dev</code> version when you make incompatible API changes,</p> </li> <li><code>minor</code> version when you add functionality in a backwards compatible manner, and</li> <li><code>patch</code> version when you make backwards compatible bug fixes.</li> </ul> <p>If in doubt, please DO visit semver.org.</p>"},{"location":"notes-to-self/#versioning-system-version-bump-guides","title":"Version Bump Guides","text":"<ul> <li>ANY change in the user interface/experience SHALL induce a <code>user</code> version bump.</li> <li>ANY change in the schema shall induce a <code>dev</code> version bump.</li> <li>ANY change in the documentation SHALL NOT induce any version bump.</li> </ul> <pre><code>flowchart TD\n    VB([Version Bump])\n        VB --&gt; |\"prerelease identifier (pi)\"| e_pr{existing `pi`}\n            e_pr --&gt; |none| bprv(\"bump prerelease version (pv)\")\n                bprv --&gt; ba(bump `pi` to `alpha`)\n                ba --&gt; bp([bump `patch`])\n            e_pr --&gt; |alpha| bb(bump to `beta`)\n                bb --&gt; r0([reset version/s below it to `0` or `none`])\n            e_pr --&gt; |beta| br(bump to `rc`) --&gt; r0\n            e_pr --&gt; |rc| rn(reset to `none`) --&gt; r0\n        VB --&gt; |others| bsv(bump specified version) --&gt; r0</code></pre>"},{"location":"notes-to-self/#changelog","title":"Changelog","text":"<p>As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise:</p> <ul> <li><code>Added</code> for new features.<ul> <li>user</li> <li>dev</li> <li>minor</li> </ul> </li> <li><code>Changed</code> for changes in existing functionality.<ul> <li>user</li> <li>dev</li> </ul> </li> <li><code>Deprecated</code> for soon-to-be removed features.<ul> <li>patch</li> </ul> </li> <li><code>Removed</code> for now removed features.<ul> <li>user</li> <li>dev</li> </ul> </li> <li><code>Fixed</code> for any bug fixes.</li> <li><code>Security</code> in case of vulnerabilities.</li> </ul> <p>Mind the human as you do with the robot; Format the changelog properly. Example format:</p> <pre><code>## 69.4.2.0 (minor bump)\n\nSprinkle a description here.\n\n### Added\n\n- I added a cool feature.\n\n### Deprecated\n\n- This feature will be deprecated 'cuz I can't maintain it anymore.\n\n### Security\n\n- Fixed stuff where the anilist token is leaked to everyone using this app.\n</code></pre>"},{"location":"notes-to-self/#documentation","title":"Documentation","text":"<p>The documentation system is a custom solution.</p> <p>If the documentation generator fails, check the traceback. It is commonly due to errors in the code and not the generator itself.</p> <p>Do not blame the shitty generator you wrote; It works as intended. 90% of the time, you just wrote some faulty code that does not run.</p>"},{"location":"docs/","title":"Documentation","text":"<p>All Versions</p>"},{"location":"docs/version/","title":"All Versions","text":"<ul> <li>Version 0.x.x.x</li> </ul>"},{"location":"docs/version/0/","title":"Version 0.x.x.x","text":"<ul> <li>Version 0.0.x.x</li> </ul>"},{"location":"docs/version/0/0/","title":"Version 0.0.x.x","text":"<p>Documentation</p>"},{"location":"docs/version/0/0/api/","title":"whinesnips","text":""},{"location":"docs/version/0/0/api/#sub-modules","title":"Sub-modules","text":"<ul> <li>whinesnips.cd</li> <li>whinesnips.utils</li> </ul> Variables <p><code>CHOLDER</code></p> <p>HTML text of copyright holders of this project</p> <p><code>PROJECT_NAME</code></p> <p>Project's name</p> <p><code>SVER</code></p> <p>The current version of the project, compliant with the semver.</p> <p>This project uses a modified semver. For more information, visit this link.</p> <p><code>VLS</code></p> <p>The current version of the project as a list.</p> <p>The list consists of 6 integers, which represent the following:     - User     - Dev     - Minor     - Patch     - Prerelease Identifier         The prerelease identifier number corresponds to the following values:             0: alpha             1: beta             2: release candidate or rc             3: none     - Prerelease Version</p>"},{"location":"docs/version/0/0/api/cd/","title":"whinesnips.cd","text":""},{"location":"docs/version/0/0/api/cd/#rationale","title":"Rationale","text":"<p>Well... I kinda' do some web scraping here and there, and this thing's real useful.</p>"},{"location":"docs/version/0/0/api/cd/#disclaimer","title":"Disclaimer","text":"<p>Let it be known that to this day, I am still trying to document the shittiness of this module.</p> <p>Good Lord, have mercy on me huhuuuuu</p>"},{"location":"docs/version/0/0/api/cd/#usage","title":"Usage","text":""},{"location":"docs/version/0/0/api/cd/#initialization","title":"Initialization","text":"<ul> <li> <p>Import the module.</p> <pre><code>from ${project_name}.cd import CustomDict\n</code></pre> </li> <li> <p>Initialize empty dictionary...</p> <pre><code>test = cd.CustomDict()\n</code></pre> <pre><code>print(test) # {}\n</code></pre> <p>or from an existing dictionary</p> <pre><code>test = cd.CustomDict({\"a\": 1, \"b\": 2})\n</code></pre> <pre><code>print(test) # {\"a\": 1, \"b\": 2}\n</code></pre> </li> </ul>"},{"location":"docs/version/0/0/api/cd/#insertion","title":"Insertion","text":"<ul> <li> <p>You can do it the old-fashioned way...</p> <pre><code>test = cd.CustomDict({\"a\": 1, \"b\": 2})\n</code></pre> <pre><code>test[\"c\"] = 3\n</code></pre> <p>Or you can use the <code>insert</code> method</p> <pre><code>test.insert(\"c\", 3)\n</code></pre> <p>Both methods yield the same results</p> <pre><code>print(test[\"c\"]) # 3\n</code></pre> </li> <li> <p>You can also use a path-like string to insert a value.</p> <pre><code>test = cd.CustomDict({\"a\": {}})\ntest.insert(\"a/b/c\", 3)\n</code></pre> <pre><code>print(test) # {\"a\": {\"b\": {\"c\": 3}}}\n</code></pre> <p>Yes, it created the keys when they are non-existent. You probably would not want this, but I certainly do. Adding a flag to disable this behavior will only add complexity to it. And, this is my library of snippets to begin with, so just deal with it.</p> <p>No one would even probably read this, other than the author itself.</p> </li> <li> <p>When the path's value is a list, it will append the given value to the list.</p> <pre><code>test = cd.CustomDict({\"a\": [1, 2, 3]})\ntest.insert(\"a/b/c\", 4)\n</code></pre> <pre><code>print(test) # {\"a\": [1, 2, 3, 4]}\n</code></pre> </li> </ul>"},{"location":"docs/version/0/0/api/cd/#getting-values","title":"Getting Values","text":"<ul> <li> <p>You can do it the old-fashioned way...</p> <pre><code>test = cd.CustomDict({\"a\": 1, \"b\": 2})\n</code></pre> <pre><code>print(test[\"a\"]) # 1\n</code></pre> <p>Or you can use the <code>dir</code> method</p> <pre><code>print(test.dir(\"a\")) # 1\n</code></pre> </li> <li> <p>You can also use a path-like string to get a value.</p> <pre><code>test = cd.CustomDict({\"a\": {\"b\": {\"c\": 3}}})\n</code></pre> <pre><code>print(test.dir(\"a/b/c\")) # 3\n</code></pre> </li> <li> <p>The <code>dir</code> method will also return a <code>CustomDict</code> object if the value is a dictionary.</p> </li> </ul> <p>Well, that's a really rudimentary way to document it, but it works for me, and that is all that matters.</p>"},{"location":"docs/version/0/0/api/cd/#how-it-works","title":"How It Works","text":"<p>Hereunder mermaid graphs that explains how the logic of each functions in the class <code>CustomDict</code> works.</p>"},{"location":"docs/version/0/0/api/cd/#traverse","title":"traverse","text":"<pre><code>%% id_tag\nflowchart LR\n    q[[A]] --&gt; n\n    args[/path, value/] --&gt; d[\"elem = self\"] --&gt; n[\"key = path[0]&lt;br&gt;ls_idx = int(key)\"] --&gt; a{elem isDict?}\n        a --&gt; |no| g{elem is Sized?}\n                g ------&gt; |no| l([\"CDEA.TypeError.CurrentElementNotDictListOrTuple\"]):::error\n                g --&gt; |yes| h{\"key not empty?\"}\n                    h ------&gt; |no| m([\"CDEA.IndexError.EmptyString\"]):::error\n                    h --&gt; |yes| o{key is int?}\n                        o ------&gt; |no| p([\"CDEA.IndexError.NotInteger\"]):::error\n                        o --&gt; |yes| i{key in range?}\n                        i -----&gt; |no| w[\"(2, {'idx': idx, 'ls_idx': ls_idx, 'len_iter': len_iter})\"]:::success\n                        i --&gt; |yes| c\n        a --&gt; |yes| e{\"(key not in elem)&lt;br&gt;and&lt;br&gt;(ls_idx is valid)?\"}\n            e --&gt; |no| b\n                b --&gt; |yes| c{path fully&lt;br&gt;traversed?}\n                    c --&gt; |no| y[\"elem = elem[key]&lt;br&gt;path = path[1:]\"]:::success --&gt; j[[A]]\n                    c --&gt; |yes| x[\"(0, {'value': typed_elem[key], ...})\"]:::success\n                b -----&gt; |no| f[\"(1, {'idx': idx})\"]:::success\n            e --&gt; |yes| k[key = ls_idx] --&gt; b{key in&lt;br&gt;elem}\n\nsubgraph Sized\nh;o;i\nend\n\nsubgraph dict\ne;k;b\nend\n\nsubgraph returns\nw;x;f\nend\n\nsubgraph raises\nl;m;p\nend\n\n    classDef success color:#83ce9e,stroke:#6fc890\n    classDef error color:#f3626b,stroke:#f14652</code></pre>"},{"location":"docs/version/0/0/api/cd/#dir","title":"dir","text":"<pre><code>flowchart LR\n    args[/path, de/] --&gt; a{path is None?}\n        a --&gt; |yes| b[/self/]:::success\n        a --&gt; |no| c{path == '' ?}\n            c --&gt; |yes| d{'' in self?}\n                d -----&gt; |no| b\n                d -----&gt; |yes| e[/\"self['']\"/]:::success\n            c --&gt; |no| f[[\"state, op = traverse(path)\"]]\n\n    f --&gt; g{state == 0?}\n        g ----&gt; |yes| h[/\"op[value]\"/]:::success\n\n    g --&gt; |no| i{state == 1?}\n        i --&gt; |yes| j{de is not None?}\n            j --&gt; |yes| k[/\"de\"/]:::success\n            j --&gt; |no| l([\"CDEA.KeyError.NotInElement\"]):::error\n\n    i --&gt; |no| m{state == 2?}\n        m --&gt; |yes| n([\"CDEA.IndexError.OutOfRange\"]):::error\n\n    m --&gt; |no| o([\"CDEI.StateUnexpected\"]):::error\n\nsubgraph returns\nb;e;h;k\nend\n\nsubgraph raises\nl;n;o\nend\n\nclassDef success color:#83ce9e,stroke:#6fc890\nclassDef error color:#f3626b,stroke:#f14652</code></pre>"},{"location":"docs/version/0/0/api/cd/#modify","title":"modify","text":"<pre><code>flowchart LR\n    args[/path, value/] --&gt; a{path is None?}\n        a --&gt; |yes| b[self]:::success\n        a --&gt; |no| c{value is None?}\n            c --&gt; |yes| b\n            c --&gt; |no| d[[\"state, op = traverse(path)\"]]\n\n    d --&gt; e{state == 0?}\n        e --&gt; |yes| f[\"last_key = path.pop()&lt;br&gt;idx = 0&lt;br&gt;current = self\"] --&gt;\n        j{path fully&lt;br&gt;traversed?}\n        j --&gt; |yes| l[\"current[last_key] = value\"] --&gt; b\n        j --&gt;\n        |no| h[\"idx += 1&lt;br&gt;key = path[idx]&lt;br&gt;current = current[key]\"] --&gt; j\n\n    e --&gt; |no| m{state == 1?}\n        m ----&gt; |yes| n([\"CDEA.KeyError.NotInElement\"]):::error\n\n    m --&gt; |no| o{state == 2?}\n        o ---&gt; |yes| p([\"CDEA.IndexError.OutOfRange\"]):::error\n\n    o ---&gt; |no| q([\"CDEI.StateUnexpected\"]):::error\n\n\nsubgraph returns\nb\nend\n\nsubgraph raises\nn;p;q\nend\n\nclassDef success color:#83ce9e,stroke:#6fc890\nclassDef error color:#f3626b,stroke:#f14652</code></pre>"},{"location":"docs/version/0/0/api/cd/#insert","title":"insert","text":"<pre><code>%% id_tag\nflowchart TD\n    args[/path, value/]\n    args --&gt; a[\"*path, last_key = path.split(sep)&lt;br&gt;lk_ls_idx = whsn.utils.utils.str2int(last_key)\"]\n    a --&gt; b{\"path_ls not empty?\"}\n        b --&gt; |yes| c[\"path = sep.join(path_ls)&lt;br&gt;state, op = self.traverse(path)&lt;br&gt;keys = op['key_type_kv'].keys()&lt;br&gt;second_last_key = keys.pop()\"]\n            l --&gt; |yes| m([CDEA.TypeError.CurrentElementNotListOrTuple]):::error\n            d --&gt; |no| ad{state == 1?}\n                ad --------&gt; |yes| ae([CDEA.KeyError.NotInElement]):::error\n                ad --&gt; |no| af{state == 2?}\n                    af -------&gt; |yes| ag([CDEA.IndexError.OutOfRange]):::error\n                    af -------&gt; |no| ai([CDEI.StateUnexpected]):::error\n            c --&gt; d{state == 0?}\n                d --&gt; |yes| i[\"iter_idx=0\"]\n                    i --&gt; j{keys fully iterated?}\n                        j --&gt; |yes| r{\"is the second&lt;br&gt;last item a dict?\"}\n                        j --&gt; |no| k[\"current = current[iter_idx]&lt;br&gt;iter_idx += 1\"] --&gt; j\n                            r --&gt; |no| w{\"is the second last&lt;br&gt;item a Sized iterable?\"}\n                                w --&gt; |yes| x{\"is last_key empty?\"}\n                                    x ----&gt; |yes| y([CDEA.IndexError.EmptyString]):::error\n                                    x --&gt; |no| z{\"is last_key None?\"}\n                                        z ---&gt; |yes| aa([CDEA.IndexError.NotInteger]):::error\n                                        z --&gt; |no| ab[\"current[second_last_key] = value\"] --&gt; q\n                            r --&gt; |yes| s{strict?}\n                                s --&gt; |yes| m\n                                s --&gt; |no| t{\"is (last_key not in current)&lt;br&gt;and&lt;br&gt;(lk_ls_idx is not None)\"}\n                                    t --&gt; |yes| u[\"last_key = lk_ls_idx\"] --&gt; v\n                                    t --&gt; |no| v[\"current[second_last_key][last_key] = value\"] --&gt; q\n        b --&gt; |no| l{strict?}\n            l --&gt; |no| n{\"is (last_key not in current)&lt;br&gt;and&lt;br&gt;(lk_ls_idx is not None)\"}\n                n --&gt; |yes| o[last_key = lk_ls_idx] --&gt; p\n                n --&gt; |no| p[\"current[last_key] = value\"]\n                    p --&gt; q[self]:::success\n\nsubgraph returns\n    q\nend\n\nsubgraph raises\n    m;y;aa;ae;ag;ai\nend\n\n    classDef success color:#83ce9e,stroke:#6fc890\n    classDef error color:#f3626b,stroke:#f14652</code></pre> Functions flatten_element <pre><code>(elem:\u00a0dict[int,\u00a0typing.Any]\u00a0|\u00a0dict[str,\u00a0typing.Any]\u00a0|\u00a0dict[int\u00a0|\u00a0str,\u00a0typing.Any]\u00a0|\u00a0list[tuple[int\u00a0|\u00a0str,\u00a0typing.Any]], sep:\u00a0str\u00a0=\u00a0'/') \u2011&gt; whinesnips.cd.CustomDict\n</code></pre> Classes BEHAVIOR <pre><code>(*args, **kwds)\n</code></pre> <p>Create a collection of name/value pairs.</p> <p>Example enumeration:</p> <p>class Color(Enum): ...     RED = 1 ...     BLUE = 2 ...     GREEN = 3</p> <p>Access them by:</p> <ul> <li>attribute access::</li> </ul> <p>Color.RED  <ul> <li>value lookup:</li> </ul> <p>Color(1)  <ul> <li>name lookup:</li> </ul> <p>Color['RED']  <p>Enumerations can be iterated over, and know how many members they have:</p> <p>len(Color) 3</p> <p>list(Color) [, , ] <p>Methods can be added to enumerations, and members can have their own attributes -- see the documentation for details.</p> Ancestors (in MRO) <ul> <li>enum.Enum</li> </ul> Class variables <p><code>append</code></p> <p><code>insert</code></p> <p><code>modify</code></p> CustomDict <pre><code>(*args:\u00a0dict[int,\u00a0typing.Any]\u00a0|\u00a0dict[str,\u00a0typing.Any]\u00a0|\u00a0dict[int\u00a0|\u00a0str,\u00a0typing.Any]\u00a0|\u00a0list[tuple[int\u00a0|\u00a0str,\u00a0typing.Any]], **kwargs:\u00a0dict[str,\u00a0typing.Any])\n</code></pre> <p>Custom dictionary.</p> Ancestors (in MRO) <ul> <li>builtins.dict</li> </ul> Methods append <pre><code>(self, path:\u00a0str\u00a0=\u00a0'c0VjUmVUX2NPZEUgYnkgd2hpX25l', value:\u00a0Any\u00a0=\u00a0'c0VjUmVUX2NPZEUgYnkgd2hpX25l', sep:\u00a0str\u00a0=\u00a0'/') \u2011&gt; whinesnips.cd.CustomDict\n</code></pre> dir <pre><code>(self, path:\u00a0str\u00a0=\u00a0'c0VjUmVUX2NPZEUgYnkgd2hpX25l', de:\u00a0Any\u00a0=\u00a0'c0VjUmVUX2NPZEUgYnkgd2hpX25l', sep:\u00a0str\u00a0=\u00a0'/') \u2011&gt; Any\n</code></pre> flatten <pre><code>(self, path:\u00a0str\u00a0=\u00a0'c0VjUmVUX2NPZEUgYnkgd2hpX25l', sep:\u00a0str\u00a0=\u00a0'/', flat_sep:\u00a0str\u00a0=\u00a0'/') \u2011&gt; whinesnips.cd.CustomDict\n</code></pre> insert <pre><code>(self, path:\u00a0str\u00a0=\u00a0'c0VjUmVUX2NPZEUgYnkgd2hpX25l', value:\u00a0Any\u00a0=\u00a0'c0VjUmVUX2NPZEUgYnkgd2hpX25l', sep:\u00a0str\u00a0=\u00a0'/', strict:\u00a0bool\u00a0=\u00a0True) \u2011&gt; whinesnips.cd.CustomDict\n</code></pre> modify <pre><code>(self, path:\u00a0str\u00a0=\u00a0'c0VjUmVUX2NPZEUgYnkgd2hpX25l', value:\u00a0Any\u00a0=\u00a0'c0VjUmVUX2NPZEUgYnkgd2hpX25l', sep:\u00a0str\u00a0=\u00a0'/') \u2011&gt; whinesnips.cd.CustomDict\n</code></pre> traverse <pre><code>(self, path:\u00a0str, sep:\u00a0str) \u2011&gt; tuple[int,\u00a0dict[str,\u00a0typing.Any]]\n</code></pre> <p>Given a path, traverse the element (self, which is a dictionary).</p> <p>The function returns a tuple of integer and dictionary. The integer is the return state. Hereunder return states, their description and corresponding return's description.</p> State Description Return Description 0 Path fully traversed Indexed Item 1 Path's not in element Kwargs for CDEA.KeyError.NotInElement 2 Path's current index not in range Kwargs for CDEA.IndexError.OutOfRange <p>When the path is fully traversed (state 0), it gives out the following dictionary and the corresponding keys' types:</p> <pre><code>    {\n        \"value\": Any,\n        \"key_type_kv\": dict[int | str, str],\n    }\n</code></pre> <p>Whereas:</p> <ul> <li><code>value</code> is the indexed item</li> <li><code>key_type_kv</code> is key-value pair (dict) of keys that are used to traverse the element and the type of the element traversed. The keys will be evaluated so that list indexes will be in integer. Or when an integer is used as a key in the element, it will also show up as such in here. The element type will be in string, and the only allowed ones are <code>dict</code>, <code>list</code> and <code>tuple</code>.</li> </ul> <p>Consider the following:</p> <pre><code>test = CustomDict({\"w\": ([\"a\", {\"b\": \"c\"}], [\"d\"])})\n</code></pre> <p>When traversed with the following:</p> <pre><code>test.traverse(\"w/-2/+1/b\")\n</code></pre> <p>The following should be returned:</p> <pre><code>{\n    \"value\": \"c\",\n    \"key_type_kv\": {\n        \"w\": \"dict\",\n         -2: \"tuple\",\n          1: \"list\",\n        \"b\": \"dict\"\n    },\n}\n</code></pre> <p>Args:</p> <pre><code>path (str): Path to traverse.\nsep (str): Seperator of the path for individual indexes.\n</code></pre> <p>Raises:</p> <pre><code>CDExceptions.API.IndexError.EmptyString:\nRaised when the currently traversed element is a list or tuple,\nand the current key is an empty string.\nCDExceptions.API.IndexError.NotInteger:\nRaised when the currently traversed element is a list or tuple,\nand the current key is not a valid integer.\nCDExceptions.API.TypeError.CurrentElementNotDictListOrTuple:\nRaised when the currently traversed element is not the last element\nto index and is not a dict, list, or tuple.\n</code></pre> <p>Returns:</p> <pre><code>tuple[int, dict[str, int]]: _description_\n</code></pre>"},{"location":"docs/version/0/0/api/utils/","title":"whinesnips.utils","text":""},{"location":"docs/version/0/0/api/utils/#super-module","title":"Super-module","text":"<ul> <li>whinesnips</li> </ul>"},{"location":"docs/version/0/0/api/utils/#sub-modules","title":"Sub-modules","text":"<ul> <li>whinesnips.utils.base_exc</li> <li>whinesnips.utils.cfg</li> <li>whinesnips.utils.exceptions</li> <li>whinesnips.utils.types</li> <li>whinesnips.utils.utils</li> </ul>"},{"location":"docs/version/0/0/api/utils/base_exc/","title":"whinesnips.utils.base_exc","text":"Functions c_exc <pre><code>(cls:\u00a0type[BaseException]) \u2011&gt; type[BaseException]\n</code></pre> <p>Decorator to raise a custom exception.</p> <p>This function gives the class an init function that raises the exception. If the class does not inherit from any Exception, it will be automatically inherit from Exception. This function also wraps the Exception with <code>c_exc_str</code> method, for adding the <code>__str__</code> method.</p> Args: <ul> <li>cls (<code>BaseException | Object</code>): The exception to modify.</li> </ul> Returns: <p><code>BaseException</code>: The exception to raise.</p> c_exc_str <pre><code>(cls:\u00a0type[BaseException]) \u2011&gt; type[BaseException]\n</code></pre> <p>Decorator to add the str method to an exception.</p> Args: <ul> <li>cls (<code>BaseException</code>): The exception to add the str method to.</li> </ul> Returns: <p><code>BaseException</code>: The exception to raise.</p> custom_exception_hook <pre><code>(exctype:\u00a0type[BaseException], value:\u00a0BaseException, traceback:\u00a0Optional[traceback]) \u2011&gt; None\n</code></pre>"},{"location":"docs/version/0/0/api/utils/cfg/","title":"whinesnips.utils.cfg","text":"Functions dcfg <pre><code>(value:\u00a0dict[str,\u00a0typing.Any], ext:\u00a0str) \u2011&gt; str\n</code></pre> <p>Dump the given value to a string with the given extension.</p> Args: <ul> <li>value (<code>dict</code>): Value to dump to a string.</li> <li>ext (<code>str</code>): Extension to dump the value to.</li> </ul> Returns: <p><code>str</code>: The dumped value.</p> pcfg <pre><code>(d:\u00a0str, type:\u00a0str) \u2011&gt; whinesnips.cd.CustomDict\n</code></pre> <p>Parse the given string as the given type.</p> Args: <ul> <li>d (<code>str</code>): String to parse.</li> <li>type (<code>str</code>): Type to parse the string as.</li> </ul> Returns: <p><code>CustomDict</code>: The parsed string.</p> rcfg <pre><code>(file:\u00a0str) \u2011&gt; whinesnips.cd.CustomDict\n</code></pre> <p>Read the contents of a file with the given file name.</p> Args: <ul> <li>file (<code>str</code>): File name of the file to read the contents of.</li> </ul> Returns: <p><code>CustomDict</code>: The contents of the file.</p> wcfg <pre><code>(file:\u00a0str, value:\u00a0dict[typing.Any,\u00a0typing.Any]\u00a0|\u00a0list[typing.Any]) \u2011&gt; None\n</code></pre> <p>Write the given value to a file with the given file name.</p> Args: <ul> <li>file (<code>str</code>): File name of the file to write the value to.</li> <li>value (<code>dict[Any, Any] | list[Any])</code>: Value to write to the file.</li> </ul>"},{"location":"docs/version/0/0/api/utils/exceptions/","title":"whinesnips.utils.exceptions","text":"Classes CDExceptions <pre><code>()\n</code></pre> Class variables <p><code>API</code></p> <p><code>Internals</code></p> CFGExceptions <pre><code>()\n</code></pre> Class variables <p><code>ExtensionNotSupported</code></p> <p>Method or function hasn't been implemented yet.</p> CLIExceptions <pre><code>()\n</code></pre> Class variables <p><code>TerminalTooThin</code></p> <p>Common base class for all non-exit exceptions.</p> <p><code>ValidationError</code></p> GeneralExceptions <pre><code>()\n</code></pre> Class variables <p><code>PrerequisiteNotFound</code></p> <p><code>ValidationError</code></p>"},{"location":"docs/version/0/0/api/utils/types/","title":"whinesnips.utils.types","text":""},{"location":"docs/version/0/0/api/utils/utils/","title":"whinesnips.utils.utils","text":""},{"location":"docs/version/0/0/api/utils/utils/#str2int","title":"str2int","text":"<pre><code>%% id_tag\nflowchart LR\n    metadata[\"&lt;font color=orange&gt;id: metadata&lt;/font&gt;&lt;br&gt;d7d058\"]\n    args[/num/] --&gt; a{is num an&lt;br&gt;integer?}\n        a --&gt; |yes| b[num]:::success\n        a --&gt; |no| c{is num not an&lt;br&gt;empty string?}\n            c --&gt; |yes| d{does num starts&lt;br&gt;with '-' or '+'?}\n                d --&gt; |yes| e{are all the characters&lt;br&gt;of num, except the&lt;br&gt;first character, a decimal?}\n                    e --&gt; |yes| f[\"int(num)\"]:::success\n                    e --&gt; |no| g\n                d --&gt; |no| g\n            c --&gt; |no| g{are all the&lt;br&gt;characters&lt;br&gt;of num a&lt;br&gt;decimal?}\n                g --&gt; |yes| f\n                g --&gt; |no| h[None]:::success\n\nsubgraph returns\nb;f;h\nend\n\n    classDef success color:#83ce9e,stroke:#6fc890</code></pre> Functions calc_hash <pre><code>(input:\u00a0str) \u2011&gt; str\n</code></pre> <p>Given a string, calculate its hash and return it.</p> Args: <pre><code>input (str): String to hash.\n</code></pre> Returns: <pre><code>str: Hash of the string.\n</code></pre> cycle_2ls <pre><code>(a:\u00a0collections.abc.Sized, b:\u00a0collections.abc.Sized) \u2011&gt; collections.abc.Iterable[typing.Any]\n</code></pre> <p>Given two list, iterate through both of them, and cycle the shorter list until the longer list has been exhausted.</p> Args: <ul> <li>a (<code>Sized</code>): First sized iterable.</li> <li>b (<code>Sized</code>): Second sized iterable.</li> </ul> Returns: <p><code>Iterable[Any]</code>: description</p> dnn <pre><code>(fn:\u00a0str, n:\u00a0int) \u2011&gt; str\n</code></pre> <p>Dirname N-th times.</p> <p>Given a file name and a number, find the parent directory of the given filename as many times as the given number.</p> Args: <ul> <li>fn (<code>str</code>): The filename to find the parent directory of.</li> <li>n (<code>int</code>): How many times the parent directory of the given filename should be found.</li> </ul> Returns: <p><code>str</code>: Parent directory of the given filename.</p> dnrp <pre><code>(file:\u00a0str, n:\u00a0Optional[int]\u00a0=\u00a0None) \u2011&gt; str\n</code></pre> <p>Get the directory component of a pathname by n times recursively then return it.</p> Args: <ul> <li>file (<code>str</code>): File to get the directory of.</li> <li>n (<code>Optional[int]</code>, optional): Number of times to get up the directory???? Defaults to 1.</li> </ul> Returns: <p><code>str</code>: The directory component got recursively by n times from the given pathname</p> dpop <pre><code>(d:\u00a0dict[typing.Any,\u00a0typing.Any], pop:\u00a0list[int\u00a0|\u00a0list[str\u00a0|\u00a0int\u00a0|\u00a0tuple[str,\u00a0...]]\u00a0|\u00a0str], de:\u00a0Optional[Any]\u00a0=\u00a0None) \u2011&gt; Any\n</code></pre> <p>Iterate through the preferred order of precedence (<code>pop</code>) and see if the value exists in the dictionary. If it does, return it. If not, return <code>de</code>.</p> Args: <ul> <li>d (<code>Dict[Any, Any]</code>): Dictionary to retrieve the value from.</li> <li>pop (<code>list[int | tuple[str | int | tuple] | str]</code>): List of keys to iterate through.</li> <li>de (<code>Any</code>, optional): Default object to be returned. Defaults to None.</li> </ul> Returns: <p><code>Any</code>: Retrieved value.</p> dt_ts <pre><code>(ts:\u00a0str) \u2011&gt; str\n</code></pre> <p>Convert the given unix timestamp to ISO 8601 format.</p> Args: <ul> <li>ts (<code>str</code>): unix timestamp to be converted to ISO 8601 format</li> </ul> Returns: <p><code>str</code>: Formatted datetime string</p> file_exists <pre><code>(fp:\u00a0str) \u2011&gt; str\n</code></pre> <p>Check if the given file path exists.</p> Args: <ul> <li>fp (<code>str</code>): File path to check if it exists.</li> </ul> Raises: <ul> <li><code>exceptions.GeneralExceptions.ValidationError.FileNotFound</code>: Raised when a file in the path is not found.</li> </ul> Returns: <p><code>str</code>: Return <code>fp</code> when file path exists.</p> fill_ls <pre><code>(*, ls:\u00a0collections.abc.Sequence[typing.Any], length:\u00a0int, filler:\u00a0Optional[Any]\u00a0=\u00a0None) \u2011&gt; collections.abc.Sequence[typing.Any]\n</code></pre> <p>Fill given list (<code>ls</code>) with <code>filler</code> up to <code>length</code>.</p> Args: <ul> <li>ls (<code>types.SequenceAny</code>): List to fill with <code>filler</code> up to <code>length</code></li> <li>length (<code>int</code>): Length of the list to achieve.</li> <li>filler (<code>Optional[Any]</code>, optional): Filler to use. Defaults to <code>None</code>.</li> </ul> Returns: <p><code>types.SequenceAny</code>: Filled list.</p> fn <pre><code>(relative_path:\u00a0str, idx:\u00a0Optional[int]\u00a0=\u00a0None) \u2011&gt; str\n</code></pre> <p>Given a path, output the same path, relative to the absolute directory path of the file that invoked this function.</p> <p>An optional argument <code>idx</code> can be supplied to change what script to get the absolute directory path from. Consider the following scenario:</p> <p>A helper function in <code>src/utils/utils</code> that takes in a relative path as an argument wants to transform the path into one relative to the caller's path. However, the said function needs to call this function directly. Said function can then use an index of <code>2</code> so that the given path to this function will be processed to be relative from the caller's path, not from the funciton in <code>src/utils/utils</code>.</p> Args: <ul> <li>relative_path (<code>str</code>): Path to output relative to the caller's path.</li> <li>idx (<code>Optional[int]</code>, optional): Index of the stack to relativize the path from. Defaults to <code>1</code>.</li> </ul> Returns: <p><code>str</code>: Path relative to the caller's path.</p> inmd <pre><code>(fp:\u00a0str, ls:\u00a0Optional[list[str]]\u00a0=\u00a0None) \u2011&gt; str\n</code></pre> <p>If given file path is not a directory, make one of the same name.</p> Args: <ul> <li>fp (<code>str</code>): File path to check if it is a directory, and if not, to make one of the same name.</li> <li>ls (<code>Optional[list[str]]</code>, optional): A list of string to which this function can append the file path to if the given file path is not a directory. Defaults to <code>None</code>.</li> </ul> Returns: <p><code>str</code>: Given filepath.</p> iter_ls_with_items <pre><code>(ls:\u00a0list[typing.Any], *items:\u00a0list[typing.Any]) \u2011&gt; collections.abc.Generator[tuple[typing.Any,\u00a0...],\u00a0None,\u00a0None]\n</code></pre> ivnd <pre><code>(var:\u00a0Any, de:\u00a0Any) \u2011&gt; Any\n</code></pre> <p>\"If Var None, Default\".</p> <p>If <code>var</code> is <code>None</code>, return <code>de</code> else <code>var</code>.</p> Args: <ul> <li>var (<code>Any</code>): Variable to check if it is None.</li> <li>de (<code>Any</code>): Default value to return if var is None.</li> </ul> Returns: <p><code>Any</code>: <code>var</code> if <code>var</code> is not None else <code>de</code>.</p> le <pre><code>(expr:\u00a0str) \u2011&gt; Any\n</code></pre> <p>Literal Evaluation.</p> Args: <ul> <li>expr (<code>str</code>): Expression to be evaluated.</li> </ul> Returns: <p><code>Any</code>: Expression literally evaluated.</p> noop <pre><code>(*args:\u00a0list[typing.Any], **kwargs:\u00a0dict[str,\u00a0typing.Any]) \u2011&gt; None\n</code></pre> <p>No operation.</p> noop_single_kwargs <pre><code>(arg:\u00a0Any) \u2011&gt; Any\n</code></pre> repl <pre><code>(s:\u00a0str, repl_dict:\u00a0dict[str,\u00a0list[str]]) \u2011&gt; str\n</code></pre> <p>Iterate through the dictionary, find the values in the given string and replace it with the corresponding key, and output the modified string.</p> Args: <ul> <li>s (<code>str</code>): String to modify the contents of.</li> <li>repl_dict (<code>dict[str, list[str]]</code>): Key-value pairs of string to replace the substring with and list of string to replace with the corresponding key.</li> </ul> Returns: <p><code>str</code>: Modified string.</p> rfnn <pre><code>(*args:\u00a0list[typing.Any]) \u2011&gt; Any\n</code></pre> <p>Return First Non-None.</p> <p>Return the first argument that is not <code>None</code>, else return <code>None</code>.</p> Returns: <p><code>Any</code>: The first argument that is not <code>None</code>, else <code>None</code>.</p> run_cmd <pre><code>(cmd:\u00a0str) \u2011&gt; None\n</code></pre> <p>Given a string, execute it as a shell command.</p> Args: <ul> <li>cmd (<code>str</code>): Shell command to excute.</li> </ul> run_mp <pre><code>(func:\u00a0collections.abc.Callable[...,\u00a0typing.Any], iterable:\u00a0collections.abc.Iterable[typing.Any]) \u2011&gt; list[typing.Any]\n</code></pre> run_mp_qgr <pre><code>(func:\u00a0collections.abc.Callable[...,\u00a0typing.Any], iterable:\u00a0collections.abc.Iterable[typing.Any]) \u2011&gt; tuple[None]\u00a0|\u00a0tuple[typing.Any]\u00a0|\u00a0tuple[typing.Any,\u00a0...]\n</code></pre> run_mp_qir <pre><code>(func:\u00a0collections.abc.Callable[...,\u00a0typing.Any], iterable:\u00a0collections.abc.Iterable[typing.Any], callback:\u00a0collections.abc.Callable[...,\u00a0typing.Any]) \u2011&gt; None\n</code></pre> <p>Run <code>multiprocessing.Pool().map_async()</code>, and quit in return.</p> <p>Iterate over <code>iterable</code> and apply iterated item to <code>func</code> asynchronously. Wait for a single process in the pool to return, and terminate the pool.</p> <p>This function requires the given function to return a bool, or an iterable with its first item as a bool. This bool is then used to decide whether to trigger the callback and terminate the pool.</p> run_mp_star <pre><code>(func:\u00a0collections.abc.Callable[...,\u00a0typing.Any], iterable:\u00a0collections.abc.Iterable[collections.abc.Iterable[typing.Any]]) \u2011&gt; list[typing.Any]\n</code></pre> run_mp_star_qgr <pre><code>(func:\u00a0collections.abc.Callable[...,\u00a0typing.Any], iterable:\u00a0collections.abc.Iterable[collections.abc.Iterable[typing.Any]]) \u2011&gt; tuple[None]\u00a0|\u00a0tuple[typing.Any]\u00a0|\u00a0tuple[typing.Any,\u00a0...]\n</code></pre> run_mp_star_qir <pre><code>(func:\u00a0collections.abc.Callable[...,\u00a0typing.Any], iterable:\u00a0collections.abc.Iterable[collections.abc.Iterable[typing.Any]], callback:\u00a0collections.abc.Callable[...,\u00a0typing.Any]) \u2011&gt; None\n</code></pre> <p>Run <code>multiprocessing.Pool().starmap_async()</code>, and quit in return.</p> <p>Iterate over <code>iterable</code> and apply iterated items to <code>func</code> asynchronously. Wait for a single process in the pool to return, and terminate the pool.</p> sanitize_text <pre><code>(s:\u00a0str) \u2011&gt; str\n</code></pre> <p>Sanitize input text.</p> <p>Reference: https://stackoverflow.com/a/93029</p> Args: <ul> <li>s (<code>str</code>): Text to be sanitized.</li> </ul> Returns: <p><code>str</code>: Sanitized text.</p> squery <pre><code>(query:\u00a0str, possibilities:\u00a0list[str], cutoff:\u00a0int\u00a0|\u00a0float\u00a0=\u00a00.6, *, processor:\u00a0collections.abc.Callable[[typing.Any],\u00a0typing.Any]\u00a0=\u00a0&lt;function &lt;lambda&gt;&gt;) \u2011&gt; collections.abc.Generator[tuple[None,\u00a0str]\u00a0|\u00a0tuple[float,\u00a0str],\u00a0None,\u00a0None]\n</code></pre> <p>Custom search query.</p> Args: <ul> <li>query (<code>str</code>): String to search for in the possibilities.</li> <li>possibilities (<code>list[str]</code>): The possibilities to search from.</li> <li>cutoff (<code>int | float</code>, optional): The minimum percentage of similarity from the given possibilities. Defaults to <code>0.6</code>.</li> <li>processor (<code>Callable[[Any], Any]</code>, optional): Processes the possibilities before comparing it with the query. Defaults to <code>lambda x: x</code>.</li> </ul> Returns: <p><code>Generator[tuple[None, str] | tuple[float, str], None, None]</code>: Generator object of mastching search quries.</p> str2int <pre><code>(num:\u00a0int\u00a0|\u00a0str) \u2011&gt; Optional[int]\n</code></pre> <p>If given number is int, return it. Else, if given number is string and is decimal, convert string to integer. Otherwise, return None.</p> Args: <pre><code>s (int | str): int or string to convert to integer.\n</code></pre> Returns: <pre><code>Optional[int]: If given argument can be converted to integer, it will be returned. Otherwise, None will be.\n</code></pre> vls_str <pre><code>(vls:\u00a0list[str\u00a0|\u00a0int]\u00a0|\u00a0list[int]\u00a0|\u00a0list[str]) \u2011&gt; list[str]\n</code></pre> <p>Given the list of version numbers, convert them to their string representation both in modified semver form and semver-compliant form.</p> Args: <ul> <li>vls (<code>list[str | int]</code>): List of version numbers.</li> </ul> Returns: <p><code>list[str]</code>: List of string representation of given list of version numbers, both in modified semver form and semver-compliant form.</p> which_ls <pre><code>(cmd:\u00a0str, mode:\u00a0Optional[int]\u00a0=\u00a0None, path:\u00a0Optional[str]\u00a0=\u00a0None) \u2011&gt; Union[tuple[str],\u00a0tuple[str,\u00a0...],\u00a0ForwardRef(None)]\n</code></pre> <p>Given a command, mode, and a PATH string, return the path which conforms to the given mode on the PATH, or None if there is no such file. Yoinked from shutil.</p> Args: <pre><code>mode (Optional[int], optional): File mode to look for. Defaults to `os.F_OK | os.X_OK`.\npath (Optional[str], optional): Path to search the command at. Defaults to the result of os.environ.get(\"PATH\").\n</code></pre> Returns: <pre><code>Optional[types.TupleStr]: Tuple of commands that conforms to the given arguments as said above.\n</code></pre> yaml_str_presenter <pre><code>(dumper, data)\n</code></pre> Classes CallbackGetResult <pre><code>()\n</code></pre> Methods callback <pre><code>(self, *args:\u00a0tuple[typing.Any,\u00a0...]) \u2011&gt; None\n</code></pre> get <pre><code>(self) \u2011&gt; tuple[None]\u00a0|\u00a0tuple[typing.Any,\u00a0...]\n</code></pre> PoolTerminate <pre><code>(pool:\u00a0multiprocessing.pool.Pool, callback:\u00a0collections.abc.Callable[...,\u00a0typing.Any])\n</code></pre> Methods inner <pre><code>(self, err:\u00a0bool, *args:\u00a0tuple[typing.Any,\u00a0...], **kwargs:\u00a0dict[str,\u00a0typing.Any]) \u2011&gt; None\n</code></pre>"}]}